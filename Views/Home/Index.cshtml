@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/AdminLTE/_Layout.cshtml";
}

@using DevExtremeAspNetCoreApp1.Models

@(Html.DevExtreme().DataGrid<SampleOrder>()
    .AllowColumnResizing(true)
    .AllowColumnReordering(true)
    .ColumnAutoWidth(true)
    .ColumnChooser(c => c
        .Enabled(true)
        .Title("Wybór kolumny")
        .EmptyPanelText("Przeciągnij kolumnę tutaj, żeby ją ukryć"))
    .ColumnFixing(c => c.Enabled(true))
    .Columns(columns => {
        columns.AddFor(m => m.OrderID)
               .Alignment(HorizontalAlignment.Left).Caption("Kod kreskowy");
        columns.AddFor(m => m.OrderDate).Caption("Data przyjcia");
        columns.AddFor(m => m.ShipCity).Caption("Lokalizacja");
        columns.AddFor(m => m.ShipCountry).Caption("Jednostka organizacyjna");
        columns.AddFor(m => m.CustomerName).Caption("Osoba odpowiedzialna");
    })
    .DataSource(d => d.Mvc().Controller("SampleData").LoadAction("Get").Key("OrderID"))
    .Export(e => e
        .Enabled(true)
        .AllowExportSelectedData(true)
        .Texts(t => t
            .ExportAll("Eksportuj wszystkie dane")
            .ExportSelectedRows("Eksportuj wybrane wiersze")))
    .FilterRow(f => f.Visible(true))
    .FocusedRowEnabled(true)
    .Grouping(g => g.AutoExpandAll(false))
    .GroupPanel(p => p
        .Visible(true)
        .EmptyPanelText("Przeciągnij tutaj nagłówek kolumny, aby pogrupować według tej kolumny"))
    .HeaderFilter(f => f.Visible(true))
    .OnExporting("exporting")
    .Pager(p => p
        .Visible(true)
        .DisplayMode(GridPagerDisplayMode.Full)
        .ShowInfo(true)
        .InfoText("Strona {0} z {1} ({2} obiektów)")
        .ShowNavigationButtons(true))
    .Paging(p => p.PageSize(10))
    .RemoteOperations(true)
    @* .SearchPanel(p =>
        p.Visible(true)
         .Placeholder("Szukaj..."))  *@
    @* .Selection(s => s.Mode(SelectionMode.Multiple)) *@
    .ShowBorders(true)
    .ShowColumnLines(true)
    .ShowRowLines(true)
    @* .Summary(s => s
        .TotalItems(totalItems => {
            totalItems.AddFor(m => m.ShipCity).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems => {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
    ) *@
    .RowAlternationEnabled(true)
)

<script>
    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('My data');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Data.xlsx');
            });
        });
        e.cancel = true;
    }
</script>